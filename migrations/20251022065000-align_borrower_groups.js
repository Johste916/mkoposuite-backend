BEGIN;

SET search_path = public;

-- Create table if missing (fields per your dump)
CREATE TABLE IF NOT EXISTS "BorrowerGroups" (
  "id"          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name"        TEXT NOT NULL,
  "branchId"    BIGINT,
  "officerId"   BIGINT,
  "meetingDay"  TEXT,
  "notes"       TEXT,
  "status"      TEXT NOT NULL DEFAULT 'active',
  "createdAt"   TIMESTAMPTZ NOT NULL DEFAULT now(),
  "updatedAt"   TIMESTAMPTZ NOT NULL DEFAULT now(),
  "deletedAt"   TIMESTAMPTZ
);

-- If some environments still have loanOfficerId, rename â†’ officerId
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name='BorrowerGroups' AND column_name='loanOfficerId'
  ) AND NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name='BorrowerGroups' AND column_name='officerId'
  ) THEN
    EXECUTE 'ALTER TABLE "BorrowerGroups" RENAME COLUMN "loanOfficerId" TO "officerId"';
  END IF;
END$$;

-- Normalize lowercase values
UPDATE "BorrowerGroups"
SET "meetingDay" = lower("meetingDay")
WHERE "meetingDay" IS NOT NULL AND "meetingDay" <> lower("meetingDay");

UPDATE "BorrowerGroups"
SET "status" = lower("status")
WHERE "status" IS NOT NULL AND "status" <> lower("status");

-- Helpful CHECKs (only if not added already)
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname='chk_borrowergroups_meetingday') THEN
    ALTER TABLE "BorrowerGroups"
      ADD CONSTRAINT "chk_borrowergroups_meetingday"
      CHECK ("meetingDay" IS NULL OR "meetingDay" IN
        ('monday','tuesday','wednesday','thursday','friday','saturday','sunday'));
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname='chk_borrowergroups_status') THEN
    ALTER TABLE "BorrowerGroups"
      ADD CONSTRAINT "chk_borrowergroups_status"
      CHECK ("status" IN ('active','inactive'));
  END IF;
END$$;

-- FK to Branches/Users/Officers (only if those tables exist)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name='Branches')
     AND NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname='fk_groups_branch') THEN
    ALTER TABLE "BorrowerGroups"
      ADD CONSTRAINT "fk_groups_branch"
      FOREIGN KEY ("branchId") REFERENCES "Branches"("id") ON DELETE SET NULL;
  END IF;

  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name='Users')
     AND NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname='fk_groups_officer_users') THEN
    ALTER TABLE "BorrowerGroups"
      ADD CONSTRAINT "fk_groups_officer_users"
      FOREIGN KEY ("officerId") REFERENCES "Users"("id") ON DELETE SET NULL;
  ELSIF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name='Officers')
     AND NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname='fk_groups_officer_officers') THEN
    ALTER TABLE "BorrowerGroups"
      ADD CONSTRAINT "fk_groups_officer_officers"
      FOREIGN KEY ("officerId") REFERENCES "Officers"("id") ON DELETE SET NULL;
  END IF;
END$$;

-- Touch-up trigger for updatedAt
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS trigger AS $$
BEGIN
  NEW."updatedAt" = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname='trg_borrowergroups_updatedat') THEN
    CREATE TRIGGER trg_borrowergroups_updatedat
      BEFORE UPDATE ON "BorrowerGroups"
      FOR EACH ROW EXECUTE FUNCTION set_updated_at();
  END IF;
END$$;

-- Indexes
CREATE INDEX IF NOT EXISTS "idx_borrowergroups_officer" ON "BorrowerGroups"("officerId");
CREATE INDEX IF NOT EXISTS "idx_borrowergroups_branch"  ON "BorrowerGroups"("branchId");
CREATE INDEX IF NOT EXISTS "idx_borrowergroups_status"  ON "BorrowerGroups"("status");

COMMIT;
